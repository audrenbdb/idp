// Code generated by MockGen. DO NOT EDIT.
// Source: login.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	idp "idp"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (idp.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(idp.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), ctx, email)
}

// SaveUser mocks base method.
func (m *MockUserRepository) SaveUser(ctx context.Context, user idp.User) (idp.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, user)
	ret0, _ := ret[0].(idp.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockUserRepositoryMockRecorder) SaveUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUserRepository)(nil).SaveUser), ctx, user)
}

// MockSessionRepository is a mock of SessionRepository interface.
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository.
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance.
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// GetSessionByID mocks base method.
func (m *MockSessionRepository) GetSessionByID(ctx context.Context, id string) (idp.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByID", ctx, id)
	ret0, _ := ret[0].(idp.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByID indicates an expected call of GetSessionByID.
func (mr *MockSessionRepositoryMockRecorder) GetSessionByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByID", reflect.TypeOf((*MockSessionRepository)(nil).GetSessionByID), ctx, id)
}

// SaveSession mocks base method.
func (m *MockSessionRepository) SaveSession(ctx context.Context, session idp.Session) (idp.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSession", ctx, session)
	ret0, _ := ret[0].(idp.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSession indicates an expected call of SaveSession.
func (mr *MockSessionRepositoryMockRecorder) SaveSession(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSession", reflect.TypeOf((*MockSessionRepository)(nil).SaveSession), ctx, session)
}

// MockPasswordResetRepository is a mock of PasswordResetRepository interface.
type MockPasswordResetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordResetRepositoryMockRecorder
}

// MockPasswordResetRepositoryMockRecorder is the mock recorder for MockPasswordResetRepository.
type MockPasswordResetRepositoryMockRecorder struct {
	mock *MockPasswordResetRepository
}

// NewMockPasswordResetRepository creates a new mock instance.
func NewMockPasswordResetRepository(ctrl *gomock.Controller) *MockPasswordResetRepository {
	mock := &MockPasswordResetRepository{ctrl: ctrl}
	mock.recorder = &MockPasswordResetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordResetRepository) EXPECT() *MockPasswordResetRepositoryMockRecorder {
	return m.recorder
}

// DeletePasswordReset mocks base method.
func (m *MockPasswordResetRepository) DeletePasswordReset(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePasswordReset", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePasswordReset indicates an expected call of DeletePasswordReset.
func (mr *MockPasswordResetRepositoryMockRecorder) DeletePasswordReset(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePasswordReset", reflect.TypeOf((*MockPasswordResetRepository)(nil).DeletePasswordReset), ctx, id)
}

// GetPasswordReset mocks base method.
func (m *MockPasswordResetRepository) GetPasswordReset(ctx context.Context, id string) (idp.PasswordReset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordReset", ctx, id)
	ret0, _ := ret[0].(idp.PasswordReset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordReset indicates an expected call of GetPasswordReset.
func (mr *MockPasswordResetRepositoryMockRecorder) GetPasswordReset(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordReset", reflect.TypeOf((*MockPasswordResetRepository)(nil).GetPasswordReset), ctx, id)
}

// SavePasswordReset mocks base method.
func (m *MockPasswordResetRepository) SavePasswordReset(ctx context.Context, reset idp.PasswordReset) (idp.PasswordReset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePasswordReset", ctx, reset)
	ret0, _ := ret[0].(idp.PasswordReset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePasswordReset indicates an expected call of SavePasswordReset.
func (mr *MockPasswordResetRepositoryMockRecorder) SavePasswordReset(ctx, reset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePasswordReset", reflect.TypeOf((*MockPasswordResetRepository)(nil).SavePasswordReset), ctx, reset)
}

// Sender is a mock of Sender interface.
type Sender struct {
	ctrl     *gomock.Controller
	recorder *SenderMockRecorder
}

// SenderMockRecorder is the mock recorder for Sender.
type SenderMockRecorder struct {
	mock *Sender
}

// NewSender creates a new mock instance.
func NewSender(ctrl *gomock.Controller) *Sender {
	mock := &Sender{ctrl: ctrl}
	mock.recorder = &SenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Sender) EXPECT() *SenderMockRecorder {
	return m.recorder
}

// SendResetPasswordToken mocks base method.
func (m *Sender) SendResetPasswordToken(ctx context.Context, email, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResetPasswordToken", ctx, email, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetPasswordToken indicates an expected call of SendResetPasswordToken.
func (mr *SenderMockRecorder) SendResetPasswordToken(ctx, email, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetPasswordToken", reflect.TypeOf((*Sender)(nil).SendResetPasswordToken), ctx, email, link)
}
